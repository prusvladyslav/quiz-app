{"ast":null,"code":"var _jsxFileName = \"/Users/vladprus/pe2/react/classwork/13-14-practice/quiz-app/src/components/Test.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Card from './Card';\nimport { useState } from 'react';\nimport QuizFinish from './QuizFinish';\nimport { listOfQuizes as questionsArray } from './listOfQuizes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Test = props => {\n  _s();\n\n  const [counter, setCounter] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n\n  const clickHandler = id => {\n    if (questionsArray[counter].rightAnswerId === id) {\n      setUserAnswers([...userAnswers, true]);\n    } else {\n      setUserAnswers([...userAnswers, false]);\n    }\n\n    setTimeout(() => {\n      setCounter(counter + 1);\n    }, 2000);\n    console.log(questionsArray);\n  }; //  const questionsArray = [\n  //         {\n  //         rightAnswerId : 1,\n  //           question: 'Сколько континентов?',\n  //           id: 1,\n  //           answers: [\n  //             {text:5,id:1},\n  //             {text:10,id:2},\n  //             {text:3,id:3},\n  //             {text:4,id:4}]\n  //       },{\n  //         rightAnswerId : 2,\n  //           question: 'Сколько?',\n  //           id: 2,\n  //           answers: [\n  //             {text:1,id:1},\n  //             {text:2,id:2},\n  //             {text:3,id:3},\n  //             {text:4,id:4}]\n  //       },{\n  //         rightAnswerId : 4,\n  //           question: 'Сколько третий?',\n  //           id: 3,\n  //           answers: [\n  //             {text:1,id:1},\n  //             {text:2,id:2},\n  //             {text:3,id:3},\n  //             {text:4,id:4}]\n  //       }\n  //     ] \n\n\n  const renderQuestion = () => {\n    return questionsArray.map(question => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          shouldShowCorrect: userAnswers.length - 1 === counter,\n          onClick: clickHandler,\n          question: question.question,\n          answers: question.answers,\n          rightAnswerId: question.rightAnswerId\n        }, question.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false);\n    });\n  };\n\n  const render = renderQuestion();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-container\",\n    children: [counter <= questionsArray.length - 1 ? render[counter] : /*#__PURE__*/_jsxDEV(QuizFinish, {\n      userAnswers: userAnswers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 66\n    }, this), counter !== questionsArray.length && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counter\",\n      children: `${counter + 1}/${questionsArray.length}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 45\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Test, \"qYrZZXuyzJsajDjx0KOkYPOBSRo=\");\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/Users/vladprus/pe2/react/classwork/13-14-practice/quiz-app/src/components/Test.jsx"],"names":["React","Card","useState","QuizFinish","listOfQuizes","questionsArray","Test","props","counter","setCounter","userAnswers","setUserAnswers","clickHandler","id","rightAnswerId","setTimeout","console","log","renderQuestion","map","question","length","answers","render"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAAQC,YAAY,IAAIC,cAAxB,QAA6C,gBAA7C;;;;AACA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACrB,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBP,QAAQ,CAAC,CAAD,CAArC;AACA,QAAM,CAACQ,WAAD,EAAaC,cAAb,IAA+BT,QAAQ,CAAC,EAAD,CAA7C;;AAEH,QAAMU,YAAY,GAAIC,EAAD,IAAO;AAE5B,QAAMR,cAAc,CAACG,OAAD,CAAd,CAAwBM,aAAxB,KAA0CD,EAAhD,EAAmD;AAClDF,MAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAgB,IAAhB,CAAD,CAAd;AACA,KAFD,MAGK;AACHC,MAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAgB,KAAhB,CAAD,CAAd;AACD;;AACDK,IAAAA,UAAU,CAAC,MAAI;AACbN,MAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AAED,KAHS,EAGR,IAHQ,CAAV;AAIAQ,IAAAA,OAAO,CAACC,GAAR,CAAYZ,cAAZ;AACK,GAbL,CAJwB,CAkBxB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AACI,QAAMa,cAAc,GAAG,MAAM;AAEzB,WAAOb,cAAc,CAACc,GAAf,CAAmBC,QAAQ,IAAI;AACnC,0BAAO;AAAA,+BACR,QAAC,IAAD;AAAwB,UAAA,iBAAiB,EAAEV,WAAW,CAACW,MAAZ,GAAqB,CAArB,KAA2Bb,OAAtE;AAA+E,UAAA,OAAO,EAAEI,YAAxF;AAAsG,UAAA,QAAQ,EAAEQ,QAAQ,CAACA,QAAzH;AAAmI,UAAA,OAAO,EAAEA,QAAQ,CAACE,OAArJ;AAA8J,UAAA,aAAa,EAAEF,QAAQ,CAACN;AAAtL,WAAWM,QAAQ,CAACP,EAApB;AAAA;AAAA;AAAA;AAAA;AADQ,uBAAP;AAGF,KAJM,CAAP;AAKH,GAPD;;AAQA,QAAMU,MAAM,GAAGL,cAAc,EAA7B;AAEJ,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,eACIV,OAAO,IAAIH,cAAc,CAACgB,MAAf,GAAwB,CAAnC,GAAuCE,MAAM,CAACf,OAAD,CAA7C,gBAAyD,QAAC,UAAD;AAAY,MAAA,WAAW,EAAEE;AAAzB;AAAA;AAAA;AAAA;AAAA,YAD7D,EAEIF,OAAO,KAAKH,cAAc,CAACgB,MAA3B,iBAAoC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBAA2B,GAAEb,OAAO,GAAC,CAAE,IAAGH,cAAc,CAACgB,MAAO;AAAhE;AAAA;AAAA;AAAA;AAAA,YAFxC;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMC,CAtED;;GAAMf,I;;KAAAA,I;AAuEN,eAAeA,IAAf","sourcesContent":["import React from 'react'\nimport Card from './Card'\nimport {useState} from 'react'\nimport QuizFinish from './QuizFinish'\nimport {listOfQuizes as questionsArray} from './listOfQuizes'\nconst Test = (props) => {\n   const [counter,setCounter] = useState(0)\n   const [userAnswers,setUserAnswers] = useState([])\n\nconst clickHandler = (id) =>{\n\nif  ( questionsArray[counter].rightAnswerId === id){\n setUserAnswers([...userAnswers,true])\n}\nelse {\n  setUserAnswers([...userAnswers,false])\n}\nsetTimeout(()=>{\n  setCounter(counter + 1)\n  \n},2000)\nconsole.log(questionsArray);\n    }\n//  const questionsArray = [\n//         {\n//         rightAnswerId : 1,\n        \n//           question: 'Сколько континентов?',\n//           id: 1,\n//           answers: [\n//             {text:5,id:1},\n//             {text:10,id:2},\n//             {text:3,id:3},\n//             {text:4,id:4}]\n        \n//       },{\n//         rightAnswerId : 2,\n        \n//           question: 'Сколько?',\n//           id: 2,\n//           answers: [\n//             {text:1,id:1},\n//             {text:2,id:2},\n//             {text:3,id:3},\n//             {text:4,id:4}]\n        \n//       },{\n//         rightAnswerId : 4,\n        \n//           question: 'Сколько третий?',\n//           id: 3,\n//           answers: [\n//             {text:1,id:1},\n//             {text:2,id:2},\n//             {text:3,id:3},\n//             {text:4,id:4}]\n        \n//       }\n//     ] \n    const renderQuestion = () => {\n\n        return questionsArray.map(question => {\n           return <>\n          <Card key={question.id} shouldShowCorrect={userAnswers.length - 1 === counter} onClick={clickHandler} question={question.question} answers={question.answers} rightAnswerId={question.rightAnswerId}  />\n      </>\n        })\n    }\n    const render = renderQuestion()\n   \nreturn(\n    <div className=\"test-container\">\n       {counter <= questionsArray.length - 1 ? render[counter] : <QuizFinish userAnswers={userAnswers}/>}\n       {counter !== questionsArray.length&& <div className=\"counter\">{`${counter+1}/${questionsArray.length}`}</div>   }\n    </div>\n)\n}\nexport default Test"]},"metadata":{},"sourceType":"module"}