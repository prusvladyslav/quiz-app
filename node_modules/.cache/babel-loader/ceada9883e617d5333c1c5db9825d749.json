{"ast":null,"code":"var _jsxFileName = \"/Users/vladprus/homework-dan.it/quiz-app/src/components/test.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Card from './Card';\nimport { useState } from 'react';\nimport QuizFinish from './QuizFinish';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Test = props => {\n  _s();\n\n  const [counter, setCounter] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n\n  const clickHandler = id => {\n    if (questionsArray[counter].rightAnswerId === id) {\n      setUserAnswers([...userAnswers, true]);\n    } else {\n      setUserAnswers([...userAnswers, false]);\n    }\n\n    setTimeout(() => {\n      setCounter(counter + 1);\n    }, 2000);\n  };\n\n  const questionsArray = [{\n    rightAnswerId: 1,\n    question: 'Сколько континентов?',\n    id: 1,\n    answers: [{\n      text: 5,\n      id: 1\n    }, {\n      text: 10,\n      id: 2\n    }, {\n      text: 3,\n      id: 3\n    }, {\n      text: 4,\n      id: 4\n    }]\n  }, {\n    rightAnswerId: 2,\n    question: 'Сколько?',\n    id: 2,\n    answers: [{\n      text: 1,\n      id: 1\n    }, {\n      text: 2,\n      id: 2\n    }, {\n      text: 3,\n      id: 3\n    }, {\n      text: 4,\n      id: 4\n    }]\n  }, {\n    rightAnswerId: 4,\n    question: 'Сколько третий?',\n    id: 3,\n    answers: [{\n      text: 1,\n      id: 1\n    }, {\n      text: 2,\n      id: 2\n    }, {\n      text: 3,\n      id: 3\n    }, {\n      text: 4,\n      id: 4\n    }]\n  }];\n\n  const renderQuestion = () => {\n    return questionsArray.map(question => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          shouldShowCorrect: userAnswers.length - 1 === counter,\n          onClick: clickHandler,\n          question: question.question,\n          answers: question.answers,\n          rightAnswerId: question.rightAnswerId\n        }, question.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false);\n    });\n  };\n\n  const render = renderQuestion();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-container\",\n    children: [counter <= questionsArray.length - 1 ? render[counter] : /*#__PURE__*/_jsxDEV(QuizFinish, {\n      userAnswers: userAnswers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 66\n    }, this), counter !== questionsArray.length && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: `${counter + 1}/${questionsArray.length}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 45\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Test, \"qYrZZXuyzJsajDjx0KOkYPOBSRo=\");\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/Users/vladprus/homework-dan.it/quiz-app/src/components/test.jsx"],"names":["React","Card","useState","QuizFinish","Test","props","counter","setCounter","userAnswers","setUserAnswers","clickHandler","id","questionsArray","rightAnswerId","setTimeout","question","answers","text","renderQuestion","map","length","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Card from './Card'\nimport {useState} from 'react'\nimport QuizFinish from './QuizFinish'\nconst Test = (props) => {\n   const [counter,setCounter] = useState(0)\n   const [userAnswers,setUserAnswers] = useState([])\n\nconst clickHandler = (id) =>{\n\nif  ( questionsArray[counter].rightAnswerId === id){\n setUserAnswers([...userAnswers,true])\n}\nelse {\n  setUserAnswers([...userAnswers,false])\n}\nsetTimeout(()=>{\n  setCounter(counter + 1)\n  \n},2000)\n\n    }\n const questionsArray = [\n        {\n        rightAnswerId : 1,\n        \n          question: 'Сколько континентов?',\n          id: 1,\n          answers: [\n            {text:5,id:1},\n            {text:10,id:2},\n            {text:3,id:3},\n            {text:4,id:4}]\n        \n      },{\n        rightAnswerId : 2,\n        \n          question: 'Сколько?',\n          id: 2,\n          answers: [\n            {text:1,id:1},\n            {text:2,id:2},\n            {text:3,id:3},\n            {text:4,id:4}]\n        \n      },{\n        rightAnswerId : 4,\n        \n          question: 'Сколько третий?',\n          id: 3,\n          answers: [\n            {text:1,id:1},\n            {text:2,id:2},\n            {text:3,id:3},\n            {text:4,id:4}]\n        \n      }\n    ] \n    const renderQuestion = () => {\n\n        return questionsArray.map(question => {\n           return <>\n          <Card key={question.id} shouldShowCorrect={userAnswers.length - 1 === counter} onClick={clickHandler} question={question.question} answers={question.answers} rightAnswerId={question.rightAnswerId}  />\n      </>\n        })\n    }\n    const render = renderQuestion()\n   \nreturn(\n    <div className=\"test-container\">\n       {counter <= questionsArray.length - 1 ? render[counter] : <QuizFinish userAnswers={userAnswers}/>}\n       {counter !== questionsArray.length&& <div>{`${counter+1}/${questionsArray.length}`}</div>   }\n    </div>\n)\n}\nexport default Test"]},"metadata":{},"sourceType":"module"}